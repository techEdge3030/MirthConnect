apiVersion: v1
kind: ConfigMap
metadata:
  name: nextgen-connect-config
data:
  mirth.properties: >-
    # Mirth Connect configuration file

    # directories
    dir.appdata = appdata
    dir.tempdata = ${dir.appdata}/temp

    # ports
    http.port = 8080
    https.port = 8443

    # password requirements
    password.minlength = 0
    password.minupper = 0
    password.minlower = 0
    password.minnumeric = 0
    password.minspecial = 0
    password.retrylimit = 0
    password.lockoutperiod = 0
    password.expiration = 0
    password.graceperiod = 0
    password.reuseperiod = 0
    password.reuselimit = 0

    # Only used for migration purposes, do not modify
    version = 4.4.2

    # keystore
    keystore.path = ${dir.appdata}/keystore.jks
    keystore.storepass = changeme
    keystore.keypass = changeme
    keystore.type = JCEKS

    # server
    http.contextpath = /
    server.url =

    http.host = 0.0.0.0
    https.host = 0.0.0.0

    https.client.protocols = TLSv1.3,TLSv1.2
    https.server.protocols = TLSv1.3,TLSv1.2,SSLv2Hello
    https.ciphersuites = TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_DSS_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    https.ephemeraldhkeysize = 2048

    # If set to true, the Connect REST API will require all incoming requests to contain an "X-Requested-With" header.
    # This protects against Cross-Site Request Forgery (CSRF) security vulnerabilities.
    server.api.require-requested-with = true

    # CORS headers
    server.api.accesscontrolalloworigin = *
    server.api.accesscontrolallowcredentials = false
    server.api.accesscontrolallowmethods = GET, POST, DELETE, PUT
    server.api.accesscontrolallowheaders = Content-Type
    server.api.accesscontrolexposeheaders =
    server.api.accesscontrolmaxage =
    server.api.allowhttp = true

    # Determines whether or not channels are deployed on server startup.
    server.startupdeploy = true

    # Determines whether libraries in the custom-lib directory will be included on the server classpath.
    # To reduce potential classpath conflicts you should create Resources and use them on specific channels/connectors instead, and then set this value to false.
    server.includecustomlib = false

    # administrator
    administrator.maxheapsize = 512m

    # properties file that will store the configuration map and be loaded during server startup
    configurationmap.path = ${dir.appdata}/configuration.properties

    # The language version for the Rhino JavaScript engine (supported values: 1.0, 1.1, ..., 1.8, es6).
    rhino.languageversion = es6

    # options: derby, mysql, postgres, oracle, sqlserver
    database = postgres

    # examples:
    #   Derby                       jdbc:derby:${dir.appdata}/mirthdb;create=true
    #   PostgreSQL                  jdbc:postgresql://localhost:5432/mirthdb
    #   MySQL                       jdbc:mysql://localhost:3306/mirthdb
    #   Oracle                      jdbc:oracle:thin:@localhost:1521:DB
    #   SQL Server/Sybase (jTDS)    jdbc:jtds:sqlserver://localhost:1433/mirthdb
    #   Microsoft SQL Server        jdbc:sqlserver://localhost:1433;databaseName=mirthdb
    #   If you are using the Microsoft SQL Server driver, please also specify database.driver below 
    database.url = jdbc:postgresql://nextgen-connect-db:5432/mirthdb

    # If using a custom or non-default driver, specify it here.
    # example:
    # Microsoft SQL server: database.driver = com.microsoft.sqlserver.jdbc.SQLServerDriver
    # (Note: the jTDS driver is used by default for sqlserver)
    #database.driver =

    # Maximum number of connections allowed for the main read/write connection pool
    database.max-connections = 20
    # Maximum number of connections allowed for the read-only connection pool
    database-readonly.max-connections = 20

    # database credentials
    database.username = mirth
    database.password = Nf3AynfXwpT*gD46

    #On startup, Maximum number of retries to establish database connections in case of failure
    database.connection.maxretry = 2

    #On startup, Maximum wait time in milliseconds for retry to establish database connections in case of failure
    database.connection.retrywaitinmilliseconds = 10000

    # If true, various read-only statements are separated into their own connection pool.
    # By default the read-only pool will use the same connection information as the master pool,
    # but you can change this with the "database-readonly" options. For example, to point the
    # read-only pool to a different JDBC URL:
    #
    # database-readonly.url = jdbc:...
    # 
    database.enable-read-write-split = true